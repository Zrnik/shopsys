<?php

namespace Shopsys\FrameworkBundle\Model\Localization;

use Doctrine\ORM\Event\LifecycleEventArgs;
use Doctrine\ORM\Event\LoadClassMetadataEventArgs;
use Doctrine\ORM\Events;
use Metadata\MetadataFactory;
use Prezent\Doctrine\Translatable\EventListener\TranslatableListener as PrezentTranslatableListener;
use Prezent\Doctrine\Translatable\Mapping\TranslatableMetadata;
use ReflectionProperty;
use Shopsys\FrameworkBundle\Component\Domain\Domain;

class TranslatableListener extends PrezentTranslatableListener
{
    /**
     * @var \Shopsys\FrameworkBundle\Component\Domain\Domain
     */
    protected Domain $domain;

    /**
     * @param \Metadata\MetadataFactory $factory
     * @param \Shopsys\FrameworkBundle\Component\Domain\Domain $domain
     */
    public function __construct(MetadataFactory $factory)
    {
        parent::__construct($factory);

        // set default locale to NULL
        // (currentLocale of entities should be set by request or stay NULL)
        // @phpstan-ignore-next-line
        $this->setCurrentLocale(null);
//        $this->
//        $this->domain = $domain;
    }

    public function getSubscribedEvents()
    {
        return [
            Events::loadClassMetadata,
            Events::postLoad,
            Events::postPersist,
        ];
    }

    /**
     * @param \Doctrine\ORM\Event\LifecycleEventArgs $args
     */
    public function postPersist(LifecycleEventArgs $args)
    {
        $entity = $args->getEntity();
        $metadata = $this->getTranslatableMetadata(get_class($entity));
        if (!($metadata instanceof TranslatableMetadata)) {
            return;
        }

        /** @var \Prezent\Doctrine\Translatable\Mapping\PropertyMetadata|null $fallbackLocale */
        $fallbackLocale = $metadata->fallbackLocale;
        if ($fallbackLocale !== null) {
            $metadata->fallbackLocale->setValue($entity, $this->getFallbackLocale());
        }

        /** @var \Prezent\Doctrine\Translatable\Mapping\PropertyMetadata|null $currentLocale */
        $currentLocale = $metadata->currentLocale;
        if ($currentLocale !== null) {
            $metadata->currentLocale->setValue($entity, $this->getCurrentLocale());
        }
    }

    /**
     * Load translations
     *
     * @param LifecycleEventArgs $args
     * @return void
     */
    public function postLoad(LifecycleEventArgs $args)
    {
        parent::postLoad($args);
        $entity = $args->getEntity();
        $metadata = $this->getTranslatableMetadata(get_class($entity));

        if ($metadata instanceof TranslatableMetadata) {
            d(get_class($entity));
            $reflectionProperty = new ReflectionProperty($entity, 'allLocales');
            $reflectionProperty->setAccessible(true);
            $reflectionProperty->setValue($entity, ['en', 'cs']);
            $reflectionProperty->setAccessible(false);
        }
    }

    public function loadClassMetadata(LoadClassMetadataEventArgs $eventArgs)
    {
        d($eventArgs->getClassMetadata()->name);
        parent::loadClassMetadata($eventArgs); // TODO: Change the autogenerated stub
    }
}
